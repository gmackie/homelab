# Complete Media Stack for Homelab
---
apiVersion: v1
kind: Namespace
metadata:
  name: media
  labels:
    name: media

---
# Jellyfin Media Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      # Run on AMD64 for transcoding performance
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64"]
      containers:
      - name: jellyfin
        image: jellyfin/jellyfin:latest
        ports:
        - containerPort: 8096
          name: web
        - containerPort: 8920
          name: https
        - containerPort: 1900
          name: dlna-udp
          protocol: UDP
        - containerPort: 7359
          name: dlna-tcp
        env:
        - name: JELLYFIN_PublishedServerUrl
          value: "http://jellyfin.homelab.local"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: cache
          mountPath: /cache
        - name: media
          mountPath: /media
        - name: movies
          mountPath: /movies
        - name: tv
          mountPath: /tv
        - name: music
          mountPath: /music
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "4000m"
            memory: "8Gi"
            nvidia.com/gpu: 1  # Optional GPU for transcoding
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: jellyfin-config
      - name: cache
        persistentVolumeClaim:
          claimName: jellyfin-cache
      - name: media
        persistentVolumeClaim:
          claimName: media-storage
      - name: movies
        persistentVolumeClaim:
          claimName: movies-storage
      - name: tv
        persistentVolumeClaim:
          claimName: tv-storage
      - name: music
        persistentVolumeClaim:
          claimName: music-storage

---
# Radarr for Movie Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      # Run on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64"]
      containers:
      - name: radarr
        image: linuxserver/radarr:latest
        ports:
        - containerPort: 7878
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: movies
          mountPath: /movies
        - name: downloads
          mountPath: /downloads
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: radarr-config
      - name: movies
        persistentVolumeClaim:
          claimName: movies-storage
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads-storage

---
# Sonarr for TV Show Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      # Run on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64"]
      containers:
      - name: sonarr
        image: linuxserver/sonarr:latest
        ports:
        - containerPort: 8989
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: tv
          mountPath: /tv
        - name: downloads
          mountPath: /downloads
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: sonarr-config
      - name: tv
        persistentVolumeClaim:
          claimName: tv-storage
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads-storage

---
# Lidarr for Music Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      # Run on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64"]
      containers:
      - name: lidarr
        image: linuxserver/lidarr:latest
        ports:
        - containerPort: 8686
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: music
          mountPath: /music
        - name: downloads
          mountPath: /downloads
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: lidarr-config
      - name: music
        persistentVolumeClaim:
          claimName: music-storage
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads-storage

---
# Prowlarr for Indexer Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      # Run on ARM for ultra-efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm"]
      containers:
      - name: prowlarr
        image: linuxserver/prowlarr:latest
        ports:
        - containerPort: 9696
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: prowlarr-config

---
# qBittorrent for Downloads
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qbittorrent
  template:
    metadata:
      labels:
        app: qbittorrent
    spec:
      # Run on AMD64 for download performance
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64"]
      containers:
      - name: qbittorrent
        image: linuxserver/qbittorrent:latest
        ports:
        - containerPort: 8080
          name: web
        - containerPort: 6881
          name: bittorrent-tcp
        - containerPort: 6881
          name: bittorrent-udp
          protocol: UDP
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        - name: WEBUI_PORT
          value: "8080"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: downloads
          mountPath: /downloads
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: qbittorrent-config
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads-storage

---
# Jackett for Torrent Indexers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jackett
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jackett
  template:
    metadata:
      labels:
        app: jackett
    spec:
      # Run on ARM for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm"]
      containers:
      - name: jackett
        image: linuxserver/jackett:latest
        ports:
        - containerPort: 9117
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: downloads
          mountPath: /downloads
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: jackett-config
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads-storage

---
# Overseerr for Request Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overseerr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: overseerr
  template:
    metadata:
      labels:
        app: overseerr
    spec:
      # Run on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64"]
      containers:
      - name: overseerr
        image: linuxserver/overseerr:latest
        ports:
        - containerPort: 5055
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: overseerr-config

---
# Bazarr for Subtitle Management
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      # Run on ARM for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm"]
      containers:
      - name: bazarr
        image: linuxserver/bazarr:latest
        ports:
        - containerPort: 6767
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: movies
          mountPath: /movies
        - name: tv
          mountPath: /tv
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: bazarr-config
      - name: movies
        persistentVolumeClaim:
          claimName: movies-storage
      - name: tv
        persistentVolumeClaim:
          claimName: tv-storage

---
# Tautulli for Jellyfin Analytics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tautulli
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tautulli
  template:
    metadata:
      labels:
        app: tautulli
    spec:
      # Run on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64"]
      containers:
      - name: tautulli
        image: linuxserver/tautulli:latest
        ports:
        - containerPort: 8181
          name: web
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: tautulli-config

---
# Persistent Storage Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-cache
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-storage
  namespace: media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: longhorn

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: movies-storage
  namespace: media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Ti
  storageClassName: longhorn

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tv-storage
  namespace: media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 3Ti
  storageClassName: longhorn

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: music-storage
  namespace: media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: longhorn

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: downloads-storage
  namespace: media
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 2Ti
  storageClassName: longhorn

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lidarr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prowlarr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qbittorrent-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jackett-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: overseerr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bazarr-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tautulli-config
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn-ssd

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  namespace: media
spec:
  selector:
    app: jellyfin
  ports:
  - name: web
    port: 8096
    targetPort: 8096
  - name: https
    port: 8920
    targetPort: 8920
  - name: dlna-tcp
    port: 7359
    targetPort: 7359
  - name: dlna-udp
    port: 1900
    targetPort: 1900
    protocol: UDP

---
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: media
spec:
  selector:
    app: radarr
  ports:
  - port: 7878
    targetPort: 7878

---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: media
spec:
  selector:
    app: sonarr
  ports:
  - port: 8989
    targetPort: 8989

---
apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: media
spec:
  selector:
    app: lidarr
  ports:
  - port: 8686
    targetPort: 8686

---
apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: media
spec:
  selector:
    app: prowlarr
  ports:
  - port: 9696
    targetPort: 9696

---
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent
  namespace: media
spec:
  selector:
    app: qbittorrent
  type: LoadBalancer
  ports:
  - name: web
    port: 8080
    targetPort: 8080
  - name: bittorrent-tcp
    port: 6881
    targetPort: 6881
  - name: bittorrent-udp
    port: 6881
    targetPort: 6881
    protocol: UDP

---
apiVersion: v1
kind: Service
metadata:
  name: jackett
  namespace: media
spec:
  selector:
    app: jackett
  ports:
  - port: 9117
    targetPort: 9117

---
apiVersion: v1
kind: Service
metadata:
  name: overseerr
  namespace: media
spec:
  selector:
    app: overseerr
  ports:
  - port: 5055
    targetPort: 5055

---
apiVersion: v1
kind: Service
metadata:
  name: bazarr
  namespace: media
spec:
  selector:
    app: bazarr
  ports:
  - port: 6767
    targetPort: 6767

---
apiVersion: v1
kind: Service
metadata:
  name: tautulli
  namespace: media
spec:
  selector:
    app: tautulli
  ports:
  - port: 8181
    targetPort: 8181

---
# Ingress for Media Services
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: media-ingress
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  rules:
  - host: jellyfin.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jellyfin
            port:
              number: 8096
  - host: radarr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radarr
            port:
              number: 7878
  - host: sonarr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarr
            port:
              number: 8989
  - host: lidarr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lidarr
            port:
              number: 8686
  - host: prowlarr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prowlarr
            port:
              number: 9696
  - host: qbittorrent.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: qbittorrent
            port:
              number: 8080
  - host: jackett.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jackett
            port:
              number: 9117
  - host: overseerr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: overseerr
            port:
              number: 5055
  - host: bazarr.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bazarr
            port:
              number: 6767
  - host: tautulli.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tautulli
            port:
              number: 8181