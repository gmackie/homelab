# Mobile App Backend API for Homelab Remote Access
---
apiVersion: v1
kind: Namespace
metadata:
  name: mobile-backend
  labels:
    name: mobile-backend

---
# Mobile API Backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mobile-api
  namespace: mobile-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mobile-api
  template:
    metadata:
      labels:
        app: mobile-api
        network-policy: "web-accessible"
    spec:
      # Mobile API on ARM64 for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm64", "amd64"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["mobile-api"]
              topologyKey: kubernetes.io/hostname
      containers:
      - name: api-server
        image: node:18-alpine
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl
          
          cat > /app/package.json << 'EOF'
          {
            "name": "homelab-mobile-api",
            "version": "1.0.0",
            "description": "Mobile API for Homelab",
            "main": "server.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "helmet": "^7.0.0",
              "express-rate-limit": "^6.8.1",
              "jsonwebtoken": "^9.0.1",
              "axios": "^1.4.0",
              "ws": "^8.13.0"
            }
          }
          EOF
          
          cd /app && npm install
          
          cat > /app/server.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const helmet = require('helmet');
          const rateLimit = require('express-rate-limit');
          const jwt = require('jsonwebtoken');
          const axios = require('axios');
          const WebSocket = require('ws');
          
          const app = express();
          const port = 3000;
          
          // Security middleware
          app.use(helmet());
          app.use(cors({
            origin: ['http://localhost:3000', 'https://homelab.yourdomain.com'],
            credentials: true
          }));
          
          // Rate limiting
          const limiter = rateLimit({
            windowMs: 15 * 60 * 1000, // 15 minutes
            max: 100 // limit each IP to 100 requests per windowMs
          });
          app.use(limiter);
          
          app.use(express.json());
          
          // JWT Secret (change this!)
          const JWT_SECRET = process.env.JWT_SECRET || 'change-this-secret';
          
          // Authentication middleware
          const authenticateToken = (req, res, next) => {
            const authHeader = req.headers['authorization'];
            const token = authHeader && authHeader.split(' ')[1];
            
            if (!token) {
              return res.sendStatus(401);
            }
            
            jwt.verify(token, JWT_SECRET, (err, user) => {
              if (err) return res.sendStatus(403);
              req.user = user;
              next();
            });
          };
          
          // Service endpoints
          const services = {
            homeassistant: 'http://home-assistant.smart-home.svc.cluster.local:8123',
            jellyfin: 'http://jellyfin.media.svc.cluster.local:8096',
            grafana: 'http://grafana.monitoring.svc.cluster.local:3000',
            homer: 'http://homer.homelab-services.svc.cluster.local:8080',
            pihole: 'http://pihole.homelab-services.svc.cluster.local:80'
          };
          
          // Health check
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', timestamp: new Date().toISOString() });
          });
          
          // Authentication
          app.post('/auth/login', (req, res) => {
            const { username, password } = req.body;
            
            // Simple auth (replace with real authentication)
            if (username === 'admin' && password === 'changeme') {
              const token = jwt.sign({ username: username }, JWT_SECRET, { expiresIn: '24h' });
              res.json({ token: token, expires_in: '24h' });
            } else {
              res.status(401).json({ error: 'Invalid credentials' });
            }
          });
          
          // Dashboard summary
          app.get('/api/dashboard', authenticateToken, async (req, res) => {
            try {
              const summary = {
                timestamp: new Date().toISOString(),
                services: {
                  homeassistant: { status: 'online', url: 'homeassistant.homelab.local' },
                  jellyfin: { status: 'online', url: 'jellyfin.homelab.local' },
                  grafana: { status: 'online', url: 'grafana.homelab.local' },
                  pihole: { status: 'online', url: 'pihole.homelab.local' }
                },
                system: {
                  cpu_usage: '45%',
                  memory_usage: '68%',
                  power_consumption: '76W',
                  uptime: '15 days',
                  temperature: '24.2Â°C'
                }
              };
              
              res.json(summary);
            } catch (error) {
              res.status(500).json({ error: 'Failed to get dashboard data' });
            }
          });
          
          // Home Assistant proxy
          app.get('/api/homeassistant/*', authenticateToken, async (req, res) => {
            try {
              const path = req.params[0];
              const response = await axios.get(`${services.homeassistant}/api/${path}`, {
                timeout: 10000
              });
              res.json(response.data);
            } catch (error) {
              res.status(500).json({ error: 'Home Assistant request failed' });
            }
          });
          
          // Jellyfin proxy
          app.get('/api/jellyfin/*', authenticateToken, async (req, res) => {
            try {
              const path = req.params[0];
              const response = await axios.get(`${services.jellyfin}/${path}`, {
                timeout: 10000
              });
              res.json(response.data);
            } catch (error) {
              res.status(500).json({ error: 'Jellyfin request failed' });
            }
          });
          
          // System metrics
          app.get('/api/metrics', authenticateToken, async (req, res) => {
            try {
              // Mock metrics (replace with real Prometheus queries)
              const metrics = {
                nodes: {
                  total: 4,
                  ready: 4,
                  architectures: {
                    amd64: 1,
                    arm64: 2,
                    arm: 1
                  }
                },
                pods: {
                  total: 35,
                  running: 33,
                  pending: 2,
                  failed: 0
                },
                resources: {
                  cpu_usage: 45,
                  memory_usage: 68,
                  storage_usage: 82
                },
                power: {
                  current: 76,
                  target: 79,
                  efficiency: 96
                }
              };
              
              res.json(metrics);
            } catch (error) {
              res.status(500).json({ error: 'Failed to get metrics' });
            }
          });
          
          // Temperature data
          app.get('/api/temperature', authenticateToken, async (req, res) => {
            try {
              const temperatures = {
                zones: [
                  { name: 'Living Room', temperature: 22.5, humidity: 45 },
                  { name: 'Bedroom', temperature: 21.8, humidity: 50 },
                  { name: 'Kitchen', temperature: 23.1, humidity: 55 },
                  { name: 'Server Room', temperature: 24.5, humidity: 40, critical: true }
                ],
                outdoor: {
                  temperature: 18.2,
                  humidity: 65,
                  description: 'Partly cloudy'
                }
              };
              
              res.json(temperatures);
            } catch (error) {
              res.status(500).json({ error: 'Failed to get temperature data' });
            }
          });
          
          // Media status
          app.get('/api/media/status', authenticateToken, async (req, res) => {
            try {
              const media_status = {
                jellyfin: {
                  status: 'online',
                  active_streams: 2,
                  library_count: 1250
                },
                downloads: {
                  active: 3,
                  queue: 12,
                  completed_today: 8
                },
                storage: {
                  movies: { count: 580, size: '2.1TB' },
                  shows: { count: 95, size: '1.8TB' },
                  music: { count: 3200, size: '45GB' }
                }
              };
              
              res.json(media_status);
            } catch (error) {
              res.status(500).json({ error: 'Failed to get media status' });
            }
          });
          
          // Control endpoints
          app.post('/api/control/service/:service/:action', authenticateToken, async (req, res) => {
            try {
              const { service, action } = req.params;
              
              // Simple service control (expand as needed)
              const result = {
                service: service,
                action: action,
                status: 'success',
                message: `${action} executed on ${service}`
              };
              
              res.json(result);
            } catch (error) {
              res.status(500).json({ error: 'Control action failed' });
            }
          });
          
          // WebSocket for real-time updates
          const wss = new WebSocket.Server({ port: 3001 });
          
          wss.on('connection', (ws) => {
            console.log('Mobile client connected via WebSocket');
            
            // Send periodic updates
            const interval = setInterval(() => {
              if (ws.readyState === WebSocket.OPEN) {
                const update = {
                  type: 'system_update',
                  timestamp: new Date().toISOString(),
                  data: {
                    cpu_usage: Math.floor(Math.random() * 20) + 40,
                    memory_usage: Math.floor(Math.random() * 20) + 60,
                    power_consumption: Math.floor(Math.random() * 10) + 70,
                    temperature: (Math.random() * 2 + 23).toFixed(1)
                  }
                };
                ws.send(JSON.stringify(update));
              }
            }, 10000); // Every 10 seconds
            
            ws.on('close', () => {
              clearInterval(interval);
              console.log('Mobile client disconnected');
            });
          });
          
          app.listen(port, '0.0.0.0', () => {
            console.log(`ð Homelab Mobile API running on port ${port}`);
            console.log(`ð± WebSocket server running on port 3001`);
          });
          EOF
          
          node /app/server.js
        ports:
        - name: api
          containerPort: 3000
        - name: websocket
          containerPort: 3001
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mobile-api-secrets
              key: jwt-secret
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: redis-cache
        image: redis:alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"

---
# Mobile API Secrets
apiVersion: v1
kind: Secret
metadata:
  name: mobile-api-secrets
  namespace: mobile-backend
type: Opaque
data:
  jwt-secret: bW9iaWxlLWFwaS1qd3Qtc2VjcmV0LWNoYW5nZW1l  # mobile-api-jwt-secret-changeme (base64)
  api-key: bW9iaWxlLWFwaS1rZXktY2hhbmdlbWU=  # mobile-api-key-changeme (base64)

---
# Mobile API Service
apiVersion: v1
kind: Service
metadata:
  name: mobile-api
  namespace: mobile-backend
spec:
  selector:
    app: mobile-api
  ports:
  - name: api
    port: 80
    targetPort: 3000
  - name: websocket
    port: 3001
    targetPort: 3001

---
# Mobile API Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mobile-api-ingress
  namespace: mobile-backend
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  rules:
  - host: mobile-api.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mobile-api
            port:
              number: 80

---
# Progressive Web App (PWA) Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mobile-pwa
  namespace: mobile-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mobile-pwa
  template:
    metadata:
      labels:
        app: mobile-pwa
        network-policy: "web-accessible"
    spec:
      # PWA on ARM for efficiency
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["arm", "arm64"]
      containers:
      - name: pwa-frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: pwa-content
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
      volumes:
      - name: pwa-content
        configMap:
          name: mobile-pwa-content
      - name: nginx-config
        configMap:
          name: mobile-pwa-nginx

---
# PWA Content
apiVersion: v1
kind: ConfigMap
metadata:
  name: mobile-pwa-content
  namespace: mobile-backend
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Homelab Mobile</title>
        <meta name="theme-color" content="#1e3c72">
        <link rel="manifest" href="/manifest.json">
        <link rel="icon" type="image/png" href="/icon-192.png">
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #1e3c72, #2a5298);
                color: white;
                min-height: 100vh;
                overflow-x: hidden;
            }
            
            .header {
                background: rgba(255, 255, 255, 0.1);
                padding: 1rem;
                text-align: center;
                backdrop-filter: blur(10px);
            }
            
            .header h1 {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }
            
            .status {
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 0.9rem;
            }
            
            .status-dot {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background: #4CAF50;
                animation: pulse 2s infinite;
            }
            
            .main {
                padding: 1rem;
            }
            
            .card {
                background: rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                border-radius: 12px;
                padding: 1rem;
                margin-bottom: 1rem;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .card h2 {
                font-size: 1.2rem;
                margin-bottom: 1rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            
            .metrics-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 1rem;
            }
            
            .metric {
                text-align: center;
            }
            
            .metric-value {
                font-size: 1.8rem;
                font-weight: bold;
                display: block;
                margin-bottom: 0.25rem;
            }
            
            .metric-label {
                font-size: 0.8rem;
                opacity: 0.8;
            }
            
            .service-list {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 0.5rem;
            }
            
            .service-item {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 0.75rem;
                text-align: center;
                text-decoration: none;
                color: white;
                transition: all 0.2s ease;
            }
            
            .service-item:hover {
                background: rgba(255, 255, 255, 0.2);
                transform: translateY(-2px);
            }
            
            .service-icon {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }
            
            .service-name {
                font-size: 0.9rem;
                font-weight: 600;
            }
            
            .temp-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 1rem;
            }
            
            .temp-item {
                text-align: center;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
            }
            
            .temp-value {
                font-size: 1.4rem;
                font-weight: bold;
                margin-bottom: 0.25rem;
            }
            
            .temp-label {
                font-size: 0.8rem;
                opacity: 0.8;
            }
            
            .critical {
                color: #FF5252;
                animation: pulse 2s infinite;
            }
            
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.5; }
            }
            
            .install-prompt {
                position: fixed;
                bottom: 1rem;
                left: 1rem;
                right: 1rem;
                background: #4CAF50;
                color: white;
                padding: 1rem;
                border-radius: 12px;
                text-align: center;
                transform: translateY(100px);
                transition: transform 0.3s ease;
            }
            
            .install-prompt.show {
                transform: translateY(0);
            }
            
            .install-btn {
                background: white;
                color: #4CAF50;
                border: none;
                padding: 0.5rem 1rem;
                border-radius: 8px;
                font-weight: 600;
                margin-top: 0.5rem;
                cursor: pointer;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ð  Homelab Mobile</h1>
            <div class="status">
                <span class="status-dot"></span>
                <span id="status-text">All Systems Online</span>
            </div>
        </div>
        
        <div class="main">
            <div class="card">
                <h2>ð System Overview</h2>
                <div class="metrics-grid">
                    <div class="metric">
                        <span class="metric-value" id="cpu-usage">45%</span>
                        <span class="metric-label">CPU Usage</span>
                    </div>
                    <div class="metric">
                        <span class="metric-value" id="memory-usage">68%</span>
                        <span class="metric-label">Memory</span>
                    </div>
                    <div class="metric">
                        <span class="metric-value" id="power-usage">76W</span>
                        <span class="metric-label">Power</span>
                    </div>
                    <div class="metric">
                        <span class="metric-value" id="uptime">99.9%</span>
                        <span class="metric-label">Uptime</span>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>ð ï¸ Quick Access</h2>
                <div class="service-list">
                    <a href="http://homer.homelab.local" class="service-item">
                        <div class="service-icon">ð±</div>
                        <div class="service-name">Dashboard</div>
                    </a>
                    <a href="http://homeassistant.homelab.local" class="service-item">
                        <div class="service-icon">ð </div>
                        <div class="service-name">Smart Home</div>
                    </a>
                    <a href="http://jellyfin.homelab.local" class="service-item">
                        <div class="service-icon">ð¬</div>
                        <div class="service-name">Media</div>
                    </a>
                    <a href="http://grafana.homelab.local" class="service-item">
                        <div class="service-icon">ð</div>
                        <div class="service-name">Metrics</div>
                    </a>
                </div>
            </div>
            
            <div class="card">
                <h2>ð¡ï¸ Temperature</h2>
                <div class="temp-grid">
                    <div class="temp-item">
                        <div class="temp-value" id="living-temp">22.5Â°C</div>
                        <div class="temp-label">Living Room</div>
                    </div>
                    <div class="temp-item">
                        <div class="temp-value" id="bedroom-temp">21.8Â°C</div>
                        <div class="temp-label">Bedroom</div>
                    </div>
                    <div class="temp-item">
                        <div class="temp-value" id="server-temp">24.5Â°C</div>
                        <div class="temp-label">Server Room</div>
                    </div>
                    <div class="temp-item">
                        <div class="temp-value" id="outdoor-temp">18.2Â°C</div>
                        <div class="temp-label">Outdoor</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="install-prompt" id="install-prompt">
            <div>ð± Install Homelab Mobile for quick access!</div>
            <button class="install-btn" id="install-btn">Install App</button>
            <button class="install-btn" onclick="document.getElementById('install-prompt').style.display='none'">Later</button>
        </div>
        
        <script src="app.js"></script>
    </body>
    </html>
  
  app.js: |
    // Progressive Web App functionality
    let deferredPrompt;
    
    // Service Worker registration
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js')
            .then(() => console.log('Service Worker registered'))
            .catch(err => console.log('Service Worker registration failed'));
    }
    
    // PWA Install prompt
    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        document.getElementById('install-prompt').classList.add('show');
    });
    
    document.getElementById('install-btn').addEventListener('click', async () => {
        if (deferredPrompt) {
            deferredPrompt.prompt();
            const result = await deferredPrompt.userChoice;
            deferredPrompt = null;
            document.getElementById('install-prompt').style.display = 'none';
        }
    });
    
    // API connection
    const API_BASE = '/api';
    
    // WebSocket connection for real-time updates
    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${wsProtocol}//${window.location.hostname}:3001`;
    let ws;
    
    function connectWebSocket() {
        try {
            ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                console.log('WebSocket connected');
                document.getElementById('status-text').textContent = 'Connected';
            };
            
            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                if (data.type === 'system_update') {
                    updateMetrics(data.data);
                }
            };
            
            ws.onclose = () => {
                console.log('WebSocket disconnected');
                document.getElementById('status-text').textContent = 'Reconnecting...';
                // Reconnect after 5 seconds
                setTimeout(connectWebSocket, 5000);
            };
        } catch (error) {
            console.log('WebSocket connection failed:', error);
        }
    }
    
    function updateMetrics(data) {
        document.getElementById('cpu-usage').textContent = data.cpu_usage + '%';
        document.getElementById('memory-usage').textContent = data.memory_usage + '%';
        document.getElementById('power-usage').textContent = data.power_consumption + 'W';
        
        // Update temperature if available
        if (data.temperature) {
            document.getElementById('server-temp').textContent = data.temperature + 'Â°C';
        }
    }
    
    // Fetch initial data
    async function loadDashboardData() {
        try {
            const response = await fetch(`${API_BASE}/dashboard`);
            if (response.ok) {
                const data = await response.json();
                updateDashboard(data);
            }
        } catch (error) {
            console.log('Failed to load dashboard data:', error);
        }
    }
    
    function updateDashboard(data) {
        if (data.system) {
            document.getElementById('cpu-usage').textContent = data.system.cpu_usage;
            document.getElementById('memory-usage').textContent = data.system.memory_usage;
            document.getElementById('power-usage').textContent = data.system.power_consumption;
            document.getElementById('uptime').textContent = '99.9%';
        }
    }
    
    // Initialize app
    document.addEventListener('DOMContentLoaded', () => {
        loadDashboardData();
        connectWebSocket();
        
        // Refresh data every 30 seconds
        setInterval(loadDashboardData, 30000);
    });
  
  manifest.json: |
    {
      "name": "Homelab Mobile",
      "short_name": "Homelab",
      "description": "Mobile access to your homelab",
      "start_url": "/",
      "display": "standalone",
      "background_color": "#1e3c72",
      "theme_color": "#1e3c72",
      "orientation": "portrait",
      "icons": [
        {
          "src": "/icon-192.png",
          "sizes": "192x192",
          "type": "image/png",
          "purpose": "any maskable"
        },
        {
          "src": "/icon-512.png",
          "sizes": "512x512",
          "type": "image/png",
          "purpose": "any maskable"
        }
      ]
    }
  
  sw.js: |
    const CACHE_NAME = 'homelab-mobile-v1';
    const urlsToCache = [
      '/',
      '/app.js',
      '/manifest.json'
    ];
    
    self.addEventListener('install', (event) => {
      event.waitUntil(
        caches.open(CACHE_NAME)
          .then((cache) => cache.addAll(urlsToCache))
      );
    });
    
    self.addEventListener('fetch', (event) => {
      event.respondWith(
        caches.match(event.request)
          .then((response) => {
            if (response) {
              return response;
            }
            return fetch(event.request);
          })
      );
    });

---
# PWA Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mobile-pwa-nginx
  namespace: mobile-backend
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            # PWA specific headers
            add_header Cache-Control "public, max-age=3600";
            add_header Service-Worker-Allowed "/";
            
            # API proxy
            location /api/ {
                proxy_pass http://mobile-api.mobile-backend.svc.cluster.local/api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            # Manifest and service worker
            location ~ \.(json|js)$ {
                add_header Cache-Control "public, max-age=0";
            }
            
            # Default route
            location / {
                try_files $uri $uri/ /index.html;
            }
        }
    }

---
# PWA Service
apiVersion: v1
kind: Service
metadata:
  name: mobile-pwa
  namespace: mobile-backend
spec:
  selector:
    app: mobile-pwa
  ports:
  - port: 80
    targetPort: 80

---
# PWA Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mobile-pwa-ingress
  namespace: mobile-backend
spec:
  rules:
  - host: mobile.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mobile-pwa
            port:
              number: 80